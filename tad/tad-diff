#!/usr/bin/env python3

import argparse
import subprocess
import tempfile
import os
import csv


class Error(Exception):

    def __init__(self, *args):
        super().__init__(*args)


def getdatafile(db, query, typed_header=False):
    """Exeecute query, save results to temp csv file, return its path.

    If typed_header is True, tell adosql to return typed header.
    """
    cmd = (
        ['adosql'] +
        (['-typed-header'] if typed_header else []) +
        ['vfp', db]
    )
    fd, filepath = tempfile.mkstemp(suffix='.csv')
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=fd)
    p.communicate(input=query.encode('utf-8'))
    os.close(fd)
    return filepath


def get_typed_keycols(datafile, keycols):
    with open(datafile, newline='', encoding='utf-8') as f:
        header = next(csv.reader(f))
    colnames = [col.split(' ')[0] for col in header]

    keycol_indices = []
    for col in keycols:
        try:
            keycol_indices.append(colnames.index(col))
        except ValueError:
            raise Error('key column %s was not found in table1 header' % col)

    return [header[i] for i in keycol_indices]
        

def main(db1, db2, query1, query2, typed_header=False, keycols=[]):
    file1 = getdatafile(db1, query1, typed_header=typed_header)
    file2 = getdatafile(db2, query2, typed_header=typed_header)

    # replace keycols with typed keycols from data file if header is
    # typed, otherwise daff won't find non-typed keycols in typed
    # header and will ignore them
    if keycols and typed_header:
        keycols = get_typed_keycols(file1, keycols)

    subprocess.call(
        ['daff', 'diff'] +
        ['--all-columns'] + # do not prune unchanged columns
        sum([['--id', col] for col in keycols], []) +
        [file1, file2]
    )
    os.remove(file1)
    os.remove(file2)


def parse_args():
    p = argparse.ArgumentParser(
        description='Compare two database tables and print differences between them in highlighter diff format. Tables may be specified as SQL queries'
    )
    p.add_argument(
        '-typed-header',
        action='store_true',
        help='output typed header. Each column will contain its type delimited from name by space'
    )
    p.add_argument(
        '-key',
        default=[],
        type=lambda s: s.split(','),
        help='comma-separated list of column names to use as a key when comparing tables'
    )
    p.add_argument(
        'db1',
        help='path to first database'
    )
    p.add_argument(
        'db2',
        help='path to second database'
    )
    p.add_argument(
        'table1',
        help='table in the first database or an SQL query retrieving data set from it. If contains no spaces assumed to be a table name and replaced with "SELECT * from <table1>", otherwise untouched'
    )
    p.add_argument(
        'table2',
        nargs='?',
        help='same as table1 but for the second database. If omitted takes value of table1'
    )

    args = p.parse_args()
    args.table2 = args.table2 or args.table1
    args.table1, args.table2 = [
        "select * from " + t if ' ' not in t else t
        for t in [args.table1, args.table2]
    ]
    return args


if __name__ == '__main__':
    args = parse_args()
    main(
        args.db1,
        args.db2,
        args.table1,
        args.table2,
        typed_header=args.typed_header,
        keycols=args.key
    )
